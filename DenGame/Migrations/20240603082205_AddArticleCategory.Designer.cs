// <auto-generated />
using System;
using DenGame.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DenGame.Migrations
{
    [DbContext(typeof(DanGameDbContext))]
    [Migration("20240603082205_AddArticleCategory")]
    partial class AddArticleCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppDlc", b =>
                {
                    b.Property<int>("AppId")
                        .HasColumnType("int")
                        .HasColumnName("AppID");

                    b.Property<int>("DlcappId")
                        .HasColumnType("int")
                        .HasColumnName("DLCAppID");

                    b.HasKey("AppId", "DlcappId");

                    b.HasIndex("DlcappId");

                    b.ToTable("AppDLC", (string)null);
                });

            modelBuilder.Entity("AppGenre", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    b.Property<int>("AppId")
                        .HasColumnType("int")
                        .HasColumnName("AppID");

                    b.HasKey("TagId", "AppId")
                        .HasName("PK_AppTag");

                    b.HasIndex("AppId");

                    b.ToTable("AppGenre", (string)null);
                });

            modelBuilder.Entity("DenGame.Models.App", b =>
                {
                    b.Property<int>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AppID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppId"));

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("AppId");

                    b.ToTable("App", (string)null);
                });

            modelBuilder.Entity("DenGame.Models.AppDetail", b =>
                {
                    b.Property<int>("AppId")
                        .HasColumnType("int")
                        .HasColumnName("AppID");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("AppType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("BackgroundImage")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CapsuleImage")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DevloperName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("HeaderImage")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("SourceFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportedLanguage")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("AppId");

                    b.ToTable("AppDetail", (string)null);
                });

            modelBuilder.Entity("DenGame.Models.AppMedium", b =>
                {
                    b.Property<int>("MediaId")
                        .HasColumnType("int")
                        .HasColumnName("MediaID");

                    b.Property<int>("AppId")
                        .HasColumnType("int")
                        .HasColumnName("AppID");

                    b.Property<string>("MediaType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("OriginalPath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ThumbnailPath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Title")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("MediaId", "AppId", "MediaType")
                        .HasName("PK__AppMedia__18E7E81F0E09CEC5");

                    b.HasIndex("AppId");

                    b.ToTable("AppMedia");
                });

            modelBuilder.Entity("DenGame.Models.ArticalComment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int>("ArticalId")
                        .HasColumnType("int")
                        .HasColumnName("ArticalID");

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CommentCreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CommentId")
                        .HasName("PK_Comment");

                    b.HasIndex("ArticalId");

                    b.HasIndex("UserId");

                    b.ToTable("ArticalComment", (string)null);
                });

            modelBuilder.Entity("DenGame.Models.ArticalCommentLike", b =>
                {
                    b.Property<int>("CommentLikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentLikeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentLikeId"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CommentLikeId");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("ArticalCommentLike", (string)null);
                });

            modelBuilder.Entity("DenGame.Models.ArticalCommentReply", b =>
                {
                    b.Property<int>("ReplyId")
                        .HasColumnType("int")
                        .HasColumnName("ReplyID");

                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ReplyContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ReplyId");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("ArticalCommentReply", (string)null);
                });

            modelBuilder.Entity("DenGame.Models.ArticalLike", b =>
                {
                    b.Property<int>("ArticalLikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ArticalLikeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticalLikeId"));

                    b.Property<int>("ArticalId")
                        .HasColumnType("int")
                        .HasColumnName("ArticalID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ArticalLikeId");

                    b.HasIndex("ArticalId");

                    b.HasIndex("UserId");

                    b.ToTable("ArticalLike", (string)null);
                });

            modelBuilder.Entity("DenGame.Models.ArticalView", b =>
                {
                    b.Property<int>("ArticalViewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ArticalViewID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticalViewId"));

                    b.Property<int>("ArticalId")
                        .HasColumnType("int")
                        .HasColumnName("ArticalID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ArticalViewId");

                    b.HasIndex("ArticalId");

                    b.HasIndex("UserId");

                    b.ToTable("ArticalView", (string)null);
                });

            modelBuilder.Entity("DenGame.Models.ArticleList", b =>
                {
                    b.Property<int>("ArticalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ArticalID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticalId"));

                    b.Property<string>("ArticalContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ArticalCoverPhoto")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("ArticalCreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ArticalTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ArticleCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ArticalId");

                    b.HasIndex("UserId");

                    b.ToTable("ArticleList", (string)null);
                });

            modelBuilder.Entity("DenGame.Models.ChatRoom", b =>
                {
                    b.Property<int>("ChatRoomId")
                        .HasColumnType("int")
                        .HasColumnName("ChatRoomID");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastMessageTime")
                        .HasColumnType("datetime");

                    b.HasKey("ChatRoomId");

                    b.ToTable("ChatRoom", (string)null);
                });

            modelBuilder.Entity("DenGame.Models.ChatRoomMember", b =>
                {
                    b.Property<int>("ChatRoomId")
                        .HasColumnType("int")
                        .HasColumnName("ChatRoomID");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ChatRoomId");

                    b.ToTable("ChatRoomMember", (string)null);
                });

            modelBuilder.Entity("DenGame.Models.FriendList", b =>
                {
                    b.Property<int>("FriendshipId")
                        .HasColumnType("int")
                        .HasColumnName("FriendshipID");

                    b.Property<int>("FriendUserId")
                        .HasColumnType("int")
                        .HasColumnName("FriendUserID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("FriendshipId");

                    b.HasIndex("UserId");

                    b.ToTable("FriendList", (string)null);
                });

            modelBuilder.Entity("DenGame.Models.GenreTag", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("TagId")
                        .HasName("PK_Tag");

                    b.ToTable("GenreTag", (string)null);
                });

            modelBuilder.Entity("DenGame.Models.Message", b =>
                {
                    b.Property<int>("ChatRoomId")
                        .HasColumnType("int")
                        .HasColumnName("ChatRoomID");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("DenGame.Models.OnlineStatus", b =>
                {
                    b.Property<DateTime>("OfflineTime")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("OnlineTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.ToTable("OnlineStatus", (string)null);
                });

            modelBuilder.Entity("DenGame.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("DenGame.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("AppId")
                        .HasColumnType("int")
                        .HasColumnName("AppID");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("AppId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("DenGame.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.Property<int>("OderId")
                        .HasColumnType("int")
                        .HasColumnName("OderID");

                    b.HasKey("PaymentId");

                    b.HasIndex("OderId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("DenGame.Models.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubscriptionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<bool?>("SubscriptionStatus")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit")
                        .HasComputedColumnSql("(CONVERT([bit],case when getdate()>[EndDate] then (0) else (1) end))", false);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscription", (string)null);
                });

            modelBuilder.Entity("DenGame.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "UserId" }, "email_User")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "username_User")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("DenGame.Models.UserProfile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateOnly>("DateOfbirth")
                        .HasColumnType("date")
                        .HasColumnName("DateOFBirth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfile", (string)null);
                });

            modelBuilder.Entity("AppDlc", b =>
                {
                    b.HasOne("DenGame.Models.App", null)
                        .WithMany()
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("FK_AppDLC_App");

                    b.HasOne("DenGame.Models.App", null)
                        .WithMany()
                        .HasForeignKey("DlcappId")
                        .IsRequired()
                        .HasConstraintName("FK_AppDLC_App1");
                });

            modelBuilder.Entity("AppGenre", b =>
                {
                    b.HasOne("DenGame.Models.App", null)
                        .WithMany()
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("FK_AppTag_App");

                    b.HasOne("DenGame.Models.GenreTag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK_AppTag_Tag");
                });

            modelBuilder.Entity("DenGame.Models.AppDetail", b =>
                {
                    b.HasOne("DenGame.Models.App", "App")
                        .WithOne("AppDetail")
                        .HasForeignKey("DenGame.Models.AppDetail", "AppId")
                        .IsRequired()
                        .HasConstraintName("FK_AppDetail_App");

                    b.Navigation("App");
                });

            modelBuilder.Entity("DenGame.Models.AppMedium", b =>
                {
                    b.HasOne("DenGame.Models.App", "App")
                        .WithMany("AppMedia")
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("FK__AppMedia__AppID__32AB8735");

                    b.Navigation("App");
                });

            modelBuilder.Entity("DenGame.Models.ArticalComment", b =>
                {
                    b.HasOne("DenGame.Models.ArticleList", "Artical")
                        .WithMany("ArticalComments")
                        .HasForeignKey("ArticalId")
                        .IsRequired()
                        .HasConstraintName("FK_Comment_ArticleList");

                    b.HasOne("DenGame.Models.User", "User")
                        .WithMany("ArticalComments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Comment_User");

                    b.Navigation("Artical");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DenGame.Models.ArticalCommentLike", b =>
                {
                    b.HasOne("DenGame.Models.ArticalComment", "Comment")
                        .WithMany("ArticalCommentLikes")
                        .HasForeignKey("CommentId")
                        .IsRequired()
                        .HasConstraintName("FK_ArticalCommentLike_ArticalComment");

                    b.HasOne("DenGame.Models.User", "User")
                        .WithMany("ArticalCommentLikes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ArticalCommentLike_User");

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DenGame.Models.ArticalCommentReply", b =>
                {
                    b.HasOne("DenGame.Models.ArticalComment", "Comment")
                        .WithMany("ArticalCommentReplies")
                        .HasForeignKey("CommentId")
                        .IsRequired()
                        .HasConstraintName("FK_ArticalCommentReply_ArticalComment");

                    b.HasOne("DenGame.Models.User", "User")
                        .WithMany("ArticalCommentReplies")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ArticalCommentReply_User");

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DenGame.Models.ArticalLike", b =>
                {
                    b.HasOne("DenGame.Models.ArticleList", "Artical")
                        .WithMany("ArticalLikes")
                        .HasForeignKey("ArticalId")
                        .IsRequired()
                        .HasConstraintName("FK_ArticalLike_ArticleList");

                    b.HasOne("DenGame.Models.User", "User")
                        .WithMany("ArticalLikes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ArticalLike_User");

                    b.Navigation("Artical");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DenGame.Models.ArticalView", b =>
                {
                    b.HasOne("DenGame.Models.ArticleList", "Artical")
                        .WithMany("ArticalViews")
                        .HasForeignKey("ArticalId")
                        .IsRequired()
                        .HasConstraintName("FK_ArticalView_ArticleList");

                    b.HasOne("DenGame.Models.User", "User")
                        .WithMany("ArticalViews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ArticalView_User");

                    b.Navigation("Artical");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DenGame.Models.ArticleList", b =>
                {
                    b.HasOne("DenGame.Models.User", "User")
                        .WithMany("ArticleLists")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ArticleList_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DenGame.Models.FriendList", b =>
                {
                    b.HasOne("DenGame.Models.User", "User")
                        .WithMany("FriendLists")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_FriendList_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DenGame.Models.Order", b =>
                {
                    b.HasOne("DenGame.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DenGame.Models.OrderItem", b =>
                {
                    b.HasOne("DenGame.Models.App", "App")
                        .WithMany("OrderItems")
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderItem_App");

                    b.HasOne("DenGame.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderItem_Order");

                    b.Navigation("App");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DenGame.Models.Payment", b =>
                {
                    b.HasOne("DenGame.Models.Order", "Oder")
                        .WithMany("Payments")
                        .HasForeignKey("OderId")
                        .IsRequired()
                        .HasConstraintName("FK_Payment_Order");

                    b.Navigation("Oder");
                });

            modelBuilder.Entity("DenGame.Models.Subscription", b =>
                {
                    b.HasOne("DenGame.Models.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Subscription_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DenGame.Models.UserProfile", b =>
                {
                    b.HasOne("DenGame.Models.User", "User")
                        .WithMany("UserProfiles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserProfile_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DenGame.Models.App", b =>
                {
                    b.Navigation("AppDetail");

                    b.Navigation("AppMedia");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("DenGame.Models.ArticalComment", b =>
                {
                    b.Navigation("ArticalCommentLikes");

                    b.Navigation("ArticalCommentReplies");
                });

            modelBuilder.Entity("DenGame.Models.ArticleList", b =>
                {
                    b.Navigation("ArticalComments");

                    b.Navigation("ArticalLikes");

                    b.Navigation("ArticalViews");
                });

            modelBuilder.Entity("DenGame.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("DenGame.Models.User", b =>
                {
                    b.Navigation("ArticalCommentLikes");

                    b.Navigation("ArticalCommentReplies");

                    b.Navigation("ArticalComments");

                    b.Navigation("ArticalLikes");

                    b.Navigation("ArticalViews");

                    b.Navigation("ArticleLists");

                    b.Navigation("FriendLists");

                    b.Navigation("Orders");

                    b.Navigation("Subscriptions");

                    b.Navigation("UserProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
